# -*- coding: utf-8 -*-
"""Neural Network SMS Text Classifier

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p3BAAY0iMKSPDeME-EyLBEggDVZH0iJc
"""

# import libraries
try:
  # %tensorflow_version only exists in Colab.
  !pip install tf-nightly
except Exception:
  pass
import tensorflow as tf
import pandas as pd
from tensorflow import keras
!pip install tensorflow-datasets
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

print(tf.__version__)

# get data files
!wget https://cdn.freecodecamp.org/project-data/sms/train-data.tsv
!wget https://cdn.freecodecamp.org/project-data/sms/valid-data.tsv

train_file_path = "train-data.tsv"
test_file_path = "valid-data.tsv"

# Load Data as train and test
train_data = pd.read_csv(train_file_path, sep='\t', names=['label', 'message'])
test_data = pd.read_csv(test_file_path, sep='\t', names=['label', 'message'])

# Process Data
train_data['label'] = train_data['label'].map({'ham': 0, 'spam': 1})
X_train = train_data['message'].values
y_train = train_data['label'].values

# Vectorization
tokenizer = keras.preprocessing.text.Tokenizer()
tokenizer.fit_on_texts(X_train)
X_train_seq = tokenizer.texts_to_sequences(X_train)
X_train_pad = keras.preprocessing.sequence.pad_sequences(X_train_seq, padding='post')

#The Model
model = keras.Sequential([
    keras.layers.Embedding(input_dim=len(tokenizer.word_index) + 1, output_dim=16, input_length=X_train_pad.shape[1]),
    keras.layers.LSTM(32, return_sequences=True),
    keras.layers.GlobalAveragePooling1D(),
    keras.layers.Dense(16, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

#Train
model.fit(X_train_pad, y_train, epochs=10, batch_size=32, verbose=1)

# function to predict messages based on model
# (should return list containing prediction and label, ex. [0.008318834938108921, 'ham'])
def predict_message(pred_text):
    seq = tokenizer.texts_to_sequences([pred_text])
    padded = keras.preprocessing.sequence.pad_sequences(seq, padding='post', maxlen=X_train_pad.shape[1])
    prediction = model.predict(padded)[0][0]
    label = 'ham' if prediction < 0.5 else 'spam'
    return [prediction, label]



pred_text = "how are you doing today?"

prediction = predict_message(pred_text)
print(prediction)

# Run this cell to test your function and model. Do not modify contents.
def test_predictions():
  test_messages = ["how are you doing today",
                   "sale today! to stop texts call 98912460324",
                   "i dont want to go. can we try it a different day? available sat",
                   "our new mobile video service is live. just install on your phone to start watching.",
                   "you have won Â£1000 cash! call to claim your prize.",
                   "i'll bring it tomorrow. don't forget the milk.",
                   "wow, is your arm alright. that happened to me one time too"
                  ]

  test_answers = ["ham", "spam", "ham", "spam", "spam", "ham", "ham"]
  passed = True

  for msg, ans in zip(test_messages, test_answers):

    prediction = predict_message(msg)
    print(prediction)
    if prediction[1] != ans:
      passed = False

  if passed:
    print("You passed the challenge. Great job!")
  else:
    print("You haven't passed yet. Keep trying.")

test_predictions()